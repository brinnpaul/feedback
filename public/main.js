'use strict';

window.app = angular.module('MyApp', ['ui.router', 'ui.bootstrap', 'ngAnimate', 'ngKookies']);

app.config(function ($urlRouterProvider, $locationProvider, $kookiesProvider) {
  // This turns off hashbang urls (/#about) and changes it to something normal (/about)
  $locationProvider.html5Mode(true);
  // If we go to a URL that ui-router doesn't have registered, go to the "/" url.
  $urlRouterProvider.otherwise('/');
  // Trigger page refresh when accessing an OAuth route
  $urlRouterProvider.when('/auth/:provider', function () {
    window.location.reload();
  });

  $kookiesProvider.config.json = true;
});
app.directive('poll', function ($state, PollFactory) {
  return {
    restrict: 'E',
    scope: {},
    templateUrl: 'js/common/poll/poll.html',
    link: function link(scope) {
      PollFactory.getAllByLectureId(1).then(function (polls) {
        scope.polls = polls;
      });
    }
  };
});

app.factory('PollFactory', function ($http) {
  function dotData(dot) {
    return dot.data;
  }
  return {
    dotData: function dotData(dot) {
      return dot.data;
    },
    getAllByLectureId: function getAllByLectureId(id) {
      return $http.get('/api/poll/lecture/' + id).then(dotData);
    },
    getOneByPollId: function getOneByPollId(id) {
      return $http.get('/api/poll/' + id).then(dotData);
    },
    createPoll: function createPoll(pollObj) {
      return $http.post('/api/poll/', pollObj).then(dotData);
    },
    updatePoll: function updatePoll(pollObj, id) {
      return $http.put('/api/poll/' + id, pollObj).then(dotData);
    },
    deletePoll: function deletePoll(id) {
      return $http.delete('/api/poll/' + id).then(dotData);
    }
  };
});

app.directive('question', function ($state, QuestionFactory) {

  return {
    restrict: 'E',
    scope: {},
    templateUrl: 'js/common/question/question.html',
    link: function link(scope) {
      QuestionFactory.getAllByLectureId(1).then(function (questions) {
        scope.questions = questions.filter(function (q) {
          return q.status === 'open';
        });
      });

      scope.submit = function () {
        if (scope.newQuestion) scope.questions.unshift({ text: scope.newQuestion, submitTime: Date.now() });
        scope.newQuestion = null;
      };

      scope.delete = function (question) {
        var index = scope.questions.indexOf(question);
        scope.questions.splice(index, 1);
      };

      scope.store = function (question, status) {
        question.status = status;
        QuestionFactory.store(question).then(function () {
          scope.delete(question);
        });
      };
    }
  };
});

app.factory('QuestionFactory', function ($http) {

  var obj = {};

  obj.getAllByLectureId = function (lectureId) {
    return $http.get('/api/question/lecture/' + lectureId).then(function (res) {
      return res.data;
    });
  };

  obj.store = function (question) {
    return $http.post('/api/question', question).then(function (res) {
      return res.data;
    });
  };

  return obj;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbW1vbi9wb2xsL3BvbGwuZGlyZWN0aXZlLmpzIiwiY29tbW9uL3BvbGwvcG9sbC5mYWN0b3J5LmpzIiwiY29tbW9uL3F1ZXN0aW9uL3F1ZXN0aW9uLmRpcmVjdGl2ZS5qcyIsImNvbW1vbi9xdWVzdGlvbi9xdWVzdGlvbi5mYWN0b3J5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE9BQUEsR0FBQSxHQUFBLFFBQUEsTUFBQSxDQUFBLE9BQUEsRUFBQSxDQUFBLFdBQUEsRUFBQSxjQUFBLEVBQUEsV0FBQSxFQUFBLFdBQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsTUFBQSxDQUFBLFVBQUEsa0JBQUEsRUFBQSxpQkFBQSxFQUFBLGdCQUFBLEVBQUE7O0FBRUEsb0JBQUEsU0FBQSxDQUFBLElBQUE7O0FBRUEscUJBQUEsU0FBQSxDQUFBLEdBQUE7O0FBRUEscUJBQUEsSUFBQSxDQUFBLGlCQUFBLEVBQUEsWUFBQTtBQUNBLFdBQUEsUUFBQSxDQUFBLE1BQUE7QUFDQSxHQUZBOztBQUlBLG1CQUFBLE1BQUEsQ0FBQSxJQUFBLEdBQUEsSUFBQTtBQUVBLENBWkE7QUNKQSxJQUFBLFNBQUEsQ0FBQSxNQUFBLEVBQUEsVUFBQSxNQUFBLEVBQUEsV0FBQSxFQUFBO0FBQ0EsU0FBQTtBQUNBLGNBQUEsR0FEQTtBQUVBLFdBQUEsRUFGQTtBQUtBLGlCQUFBLDBCQUxBO0FBTUEsVUFBQSxjQUFBLEtBQUEsRUFBQTtBQUNBLGtCQUFBLGlCQUFBLENBQUEsQ0FBQSxFQUNBLElBREEsQ0FDQSxVQUFBLEtBQUEsRUFBQTtBQUNBLGNBQUEsS0FBQSxHQUFBLEtBQUE7QUFDQSxPQUhBO0FBSUE7QUFYQSxHQUFBO0FBYUEsQ0FkQTs7QUNBQSxJQUFBLE9BQUEsQ0FBQSxhQUFBLEVBQUEsVUFBQSxLQUFBLEVBQUE7QUFDQSxXQUFBLE9BQUEsQ0FBQSxHQUFBLEVBQUE7QUFDQSxXQUFBLElBQUEsSUFBQTtBQUNBO0FBQ0EsU0FBQTtBQUNB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Q29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbndpbmRvdy5hcHAgPSBhbmd1bGFyLm1vZHVsZSgnTXlBcHAnLCBbJ3VpLnJvdXRlcicsICd1aS5ib290c3RyYXAnLCAnbmdBbmltYXRlJywgJ25nS29va2llcyddKTtcblxuYXBwLmNvbmZpZyhmdW5jdGlvbiAoJHVybFJvdXRlclByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlciwgJGtvb2tpZXNQcm92aWRlcikge1xuICAgIC8vIFRoaXMgdHVybnMgb2ZmIGhhc2hiYW5nIHVybHMgKC8jYWJvdXQpIGFuZCBjaGFuZ2VzIGl0IHRvIHNvbWV0aGluZyBub3JtYWwgKC9hYm91dClcbiAgICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XG4gICAgLy8gSWYgd2UgZ28gdG8gYSBVUkwgdGhhdCB1aS1yb3V0ZXIgZG9lc24ndCBoYXZlIHJlZ2lzdGVyZWQsIGdvIHRvIHRoZSBcIi9cIiB1cmwuXG4gICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xuICAgIC8vIFRyaWdnZXIgcGFnZSByZWZyZXNoIHdoZW4gYWNjZXNzaW5nIGFuIE9BdXRoIHJvdXRlXG4gICAgJHVybFJvdXRlclByb3ZpZGVyLndoZW4oJy9hdXRoLzpwcm92aWRlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgIH0pO1xuXG4gICAgJGtvb2tpZXNQcm92aWRlci5jb25maWcuanNvbiA9IHRydWU7XG5cbn0pOyIsImFwcC5kaXJlY3RpdmUoJ3BvbGwnLCAoJHN0YXRlLCBQb2xsRmFjdG9yeSkgPT4ge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgc2NvcGU6IHtcblxuICAgIH0sXG4gICAgdGVtcGxhdGVVcmw6ICdqcy9jb21tb24vcG9sbC9wb2xsLmh0bWwnLFxuICAgIGxpbms6IChzY29wZSkgPT4ge1xuICAgICAgUG9sbEZhY3RvcnkuZ2V0QWxsQnlMZWN0dXJlSWQoMSlcbiAgICAgIC50aGVuKChwb2xscykgPT4ge1xuICAgICAgICBzY29wZS5wb2xscyA9IHBvbGxzXG4gICAgICB9KVxuICAgIH1cbiAgfVxufSlcbiIsImFwcC5mYWN0b3J5KCdQb2xsRmFjdG9yeScsICgkaHR0cCkgPT4ge1xuICBmdW5jdGlvbiBkb3REYXRhKGRvdCkge1xuICAgIHJldHVybiBkb3QuZGF0YVxuICB9XG4gIHJldHVybiB7XG4gICAgZG90RGF0YTogKGRvdCkgPT4ge1xuICAgICAgcmV0dXJuIGRvdC5kYXRhXG4gICAgfSxcbiAgICBnZXRBbGxCeUxlY3R1cmVJZDogKGlkKSA9PiB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3BvbGwvbGVjdHVyZS8nK2lkKVxuICAgICAgLnRoZW4oZG90RGF0YSlcbiAgICB9LFxuICAgIGdldE9uZUJ5UG9sbElkOiAoaWQpID0+IHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9sbC8nK2lkKVxuICAgICAgLnRoZW4oZG90RGF0YSlcbiAgICB9LFxuICAgIGNyZWF0ZVBvbGw6IChwb2xsT2JqKSA9PiB7XG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb2xsLycsIHBvbGxPYmopXG4gICAgICAudGhlbihkb3REYXRhKVxuICAgIH0sXG4gICAgdXBkYXRlUG9sbDogKHBvbGxPYmosIGlkKSA9PiB7XG4gICAgICByZXR1cm4gJGh0dHAucHV0KCcvYXBpL3BvbGwvJytpZCwgcG9sbE9iailcbiAgICAgIC50aGVuKGRvdERhdGEpXG4gICAgfSxcbiAgICBkZWxldGVQb2xsOiAoaWQpID0+IHtcbiAgICAgIHJldHVybiAkaHR0cC5kZWxldGUoJy9hcGkvcG9sbC8nK2lkKVxuICAgICAgLnRoZW4oZG90RGF0YSlcbiAgICB9XG4gIH1cbn0pXG4iLCJhcHAuZGlyZWN0aXZlKCdxdWVzdGlvbicsIGZ1bmN0aW9uKCRzdGF0ZSwgUXVlc3Rpb25GYWN0b3J5KSB7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgXG4gICAgICAgIH0sXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnanMvY29tbW9uL3F1ZXN0aW9uL3F1ZXN0aW9uLmh0bWwnLFxuICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSkge1xuICAgICAgICAgICAgUXVlc3Rpb25GYWN0b3J5LmdldEFsbEJ5TGVjdHVyZUlkKDEpLnRoZW4oZnVuY3Rpb24ocXVlc3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUucXVlc3Rpb25zID0gcXVlc3Rpb25zLmZpbHRlcihmdW5jdGlvbihxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBxLnN0YXR1cyA9PT0gJ29wZW4nXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmIChzY29wZS5uZXdRdWVzdGlvbikgc2NvcGUucXVlc3Rpb25zLnVuc2hpZnQoe3RleHQ6IHNjb3BlLm5ld1F1ZXN0aW9uLCBzdWJtaXRUaW1lOiBEYXRlLm5vdygpfSlcbiAgICAgICAgICAgICAgICBzY29wZS5uZXdRdWVzdGlvbiA9IG51bGxcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2NvcGUuZGVsZXRlID0gZnVuY3Rpb24ocXVlc3Rpb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBzY29wZS5xdWVzdGlvbnMuaW5kZXhPZihxdWVzdGlvbilcbiAgICAgICAgICAgICAgICBzY29wZS5xdWVzdGlvbnMuc3BsaWNlKGluZGV4LCAxKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzY29wZS5zdG9yZSA9IGZ1bmN0aW9uKHF1ZXN0aW9uLCBzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICBxdWVzdGlvbi5zdGF0dXMgPSBzdGF0dXNcbiAgICAgICAgICAgICAgICBRdWVzdGlvbkZhY3Rvcnkuc3RvcmUocXVlc3Rpb24pLnRoZW4oZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuZGVsZXRlKHF1ZXN0aW9uKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59KTtcbiIsImFwcC5mYWN0b3J5KCdRdWVzdGlvbkZhY3RvcnknLCBmdW5jdGlvbiAoJGh0dHApIHtcblxuXHR2YXIgb2JqID0ge307XG5cblx0b2JqLmdldEFsbEJ5TGVjdHVyZUlkID0gZnVuY3Rpb24obGVjdHVyZUlkKSB7XG5cdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9xdWVzdGlvbi9sZWN0dXJlLycgKyBsZWN0dXJlSWQpLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG5cdFx0XHRyZXR1cm4gcmVzLmRhdGE7XG5cdFx0fSlcblx0fVxuXG5cdG9iai5zdG9yZSA9IGZ1bmN0aW9uKHF1ZXN0aW9uKSB7XG5cdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcXVlc3Rpb24nLCBxdWVzdGlvbikudGhlbihmdW5jdGlvbihyZXMpIHtcblx0XHRcdHJldHVybiByZXMuZGF0YTtcblx0XHR9KVxuXHR9XG5cblx0cmV0dXJuIG9iajtcblxufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
