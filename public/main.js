'use strict';

window.app = angular.module('MyApp', ['ui.router', 'ui.bootstrap', 'ngAnimate', 'ngKookies']);

app.config(function ($urlRouterProvider, $locationProvider, $kookiesProvider) {
  // This turns off hashbang urls (/#about) and changes it to something normal (/about)
  $locationProvider.html5Mode(true);
  // If we go to a URL that ui-router doesn't have registered, go to the "/" url.
  $urlRouterProvider.otherwise('/');
  // Trigger page refresh when accessing an OAuth route
  $urlRouterProvider.when('/auth/:provider', function () {
    window.location.reload();
  });

  $kookiesProvider.config.json = true;
});
app.directive('poll', function ($state, PollFactory) {
  return {
    restrict: 'E',
    scope: {},
    templateUrl: 'js/common/poll/poll.html',
    link: function link(scope) {
      PollFactory.getAllByLectureId(1).then(function (polls) {
        scope.polls = polls;
      });
    }
  };
});

app.factory('PollFactory', function ($http) {
  function dotData(dot) {
    return dot.data;
  }
  return {
    dotData: function dotData(dot) {
      return dot.data;
    },
    getAllByLectureId: function getAllByLectureId(id) {
      return $http.get('/api/poll/lecture/' + id).then(dotData);
    },
    getOneByPollId: function getOneByPollId(id) {
      return $http.get('/api/poll/' + id).then(dotData);
    },
    createPoll: function createPoll(pollObj) {
      return $http.post('/api/poll/', pollObj).then(dotData);
    },
    updatePoll: function updatePoll(pollObj, id) {
      return $http.put('/api/poll/' + id, pollObj).then(dotData);
    },
    deletePoll: function deletePoll(id) {
      return $http.delete('/api/poll/' + id).then(dotData);
    }
  };
});

app.directive('question', function ($state, QuestionFactory) {

  return {
    restrict: 'E',
    scope: {},
    templateUrl: 'js/common/question/question.html',
    link: function link(scope) {
      scope.questions = [{ text: "What is life?" }, { text: "What is death?" }, { text: "What is code?" }];

      scope.submitQuestion = function () {
        if (scope.newQuestion) scope.questions.unshift({ text: scope.newQuestion });
        scope.newQuestion = null;
      };

      scope.deleteQuestion = function (question) {
        var index = scope.questions.indexOf(question);
        scope.questions.splice(index, 1);
      };
    }
  };
});

app.factory('QuestionFactory', function ($http) {

  var obj = {};

  obj.getAllByLectureId = function (lectureId) {
    return $http.get('/api/question/lecture/' + lectureId).then(function (res) {
      return res.data;
    });
  };

  return obj;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbW1vbi9wb2xsL3BvbGwuZGlyZWN0aXZlLmpzIiwiY29tbW9uL3BvbGwvcG9sbC5mYWN0b3J5LmpzIiwiY29tbW9uL3F1ZXN0aW9uL3F1ZXN0aW9uLmRpcmVjdGl2ZS5qcyIsImNvbW1vbi9xdWVzdGlvbi9xdWVzdGlvbi5mYWN0b3J5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE9BQUEsR0FBQSxHQUFBLFFBQUEsTUFBQSxDQUFBLE9BQUEsRUFBQSxDQUFBLFdBQUEsRUFBQSxjQUFBLEVBQUEsV0FBQSxFQUFBLFdBQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsTUFBQSxDQUFBLFVBQUEsa0JBQUEsRUFBQSxpQkFBQSxFQUFBLGdCQUFBLEVBQUE7O0FBRUEsb0JBQUEsU0FBQSxDQUFBLElBQUE7O0FBRUEscUJBQUEsU0FBQSxDQUFBLEdBQUE7O0FBRUEscUJBQUEsSUFBQSxDQUFBLGlCQUFBLEVBQUEsWUFBQTtBQUNBLFdBQUEsUUFBQSxDQUFBLE1BQUE7QUFDQSxHQUZBOztBQUlBLG1CQUFBLE1BQUEsQ0FBQSxJQUFBLEdBQUEsSUFBQTtBQUVBLENBWkE7QUNKQSxJQUFBLFNBQUEsQ0FBQSxNQUFBLEVBQUEsVUFBQSxNQUFBLEVBQUEsV0FBQSxFQUFBO0FBQ0EsU0FBQTtBQUNBLGNBQUEsR0FEQTtBQUVBLFdBQUEsRUFGQTtBQUtBLGlCQUFBLDBCQUxBO0FBTUEsVUFBQSxjQUFBLEtBQUEsRUFBQTtBQUNBLGtCQUFBLGlCQUFBLENBQUEsQ0FBQSxFQUNBLElBREEsQ0FDQSxVQUFBLEtBQUEsRUFBQTtBQUNBLGNBQUEsS0FBQSxHQUFBLEtBQUE7QUFDQSxPQUhBO0FBSUE7QUFYQSxHQUFBO0FBYUEsQ0FkQTs7QUNBQSxJQUFBLE9BQUEsQ0FBQSxhQUFBLEVBQUEsVUFBQSxLQUFBLEVBQUE7QUFDQSxXQUFBLE9BQUEsQ0FBQSxHQUFBLEVBQUE7QUFDQSxXQUFBLElBQUEsSUFBQTtBQUNBO0FBQ0EsU0FBQTtBQUNBLGFBQUEsaUJBQUEsR0FBQSxFQUFBO0FBQ0EsYUFBQSxJQUFBLElBQUE7QUFDQSxLQUhBO0FBSUEsdUJBQUEsMkJBQUEsRUFBQSxFQUFBO0FBQ0EsYUFBQSxNQUFBLEdBQUEsQ0FBQSx1QkFBQSxFQUFBLEVBQ0EsSUFEQSxDQUNBLE9BREEsQ0FBQTtBQUVBLEtBUEE7QUFRQSxvQkFBQSx3QkFBQSxFQUFBLEVBQUE7QUFDQSxhQUFBLE1BQUEsR0FBQSxDQUFBLGVBQUEsRUFBQSxFQUNBLElBREEsQ0FDQSxPQURBLENBQUE7QUFFQSxLQVhBO0FBWUEsZ0JBQUEsb0JBQUEsT0FBQSxFQUFBO0FBQ0EsYUFBQSxNQUFBLElBQUEsQ0FBQSxZQUFBLEVBQUEsT0FBQSxFQUNBLElBREEsQ0FDQSxPQURBLENBQUE7QUFFQSxLQWZBO0FBZ0JBLGdCQUFBLG9CQUFBLE9BQUEsRUFBQSxFQUFBLEVBQUE7QUFDQSxhQUFBLE1BQUEsR0FBQSxDQUFBLGVBQUEsRUFBQSxFQUFBLE9BQUEsRUFDQSxJQURBLENBQ0EsT0FEQSxDQUFBO0FBRUEsS0FuQkE7QUFvQkEsZ0JBQUEsb0JBQUEsRUFBQSxFQUFBO0FBQ0EsYUFBQSxNQUFBLE1BQUEsQ0FBQSxlQUFBLEVBQUEsRUFDQSxJQURBLENBQ0EsT0FEQSxDQUFBO0FBRUE7QUF2QkEsR0FBQTtBQXlCQSxDQTdCQTs7QUNBQSxJQUFBLFNBQUEsQ0FBQSxVQUFBLEVBQUEsVUFBQSxNQUFBLEVBQUEsZUFBQSxFQUFBOztBQUVBLFNBQUE7QUFDQSxjQUFBLEdBREE7QUFFQSxXQUFBLEVBRkE7QUFLQSxpQkFBQSxrQ0FMQTtBQU1BLFVBQUEsY0FBQSxLQUFBLEVBQUE7QUFDQSxZQUFBLFNBQUEsR0FBQSxDQUNBLEVBQUEsTUFBQSxlQUFBLEVBREEsRUFFQSxFQUFBLE1BQUEsZ0JBQUEsRUFGQSxFQUdBLEVBQUEsTUFBQSxlQUFBLEVBSEEsQ0FBQTs7QUFNQSxZQUFBLGNBQUEsR0FBQSxZQUFBO0FBQ0EsWUFBQSxNQUFBLFdBQUEsRUFBQSxNQUFBLFNBQUEsQ0FBQSxPQUFBLENBQUEsRUFBQSxNQUFBLE1BQUEsV0FBQSxFQUFBO0FBQ0EsY0FBQSxXQUFBLEdBQUEsSUFBQTtBQUNBLE9BSEE7O0FBS0EsWUFBQSxjQUFBLEdBQUEsVUFBQSxRQUFBLEVBQUE7QUFDQSxZQUFBLFFBQUEsTUFBQSxTQUFBLENBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQTtBQUNBLGNBQUEsU0FBQSxDQUFBLE1BQUEsQ0FBQSxLQUFBLEVBQUEsQ0FBQTtBQUNBLE9BSEE7QUFJQTtBQXRCQSxHQUFBO0FBd0JBLENBMUJBOztBQ0FBLElBQUEsT0FBQSxDQUFBLGlCQUFBLEVBQUEsVUFBQSxLQUFBLEVBQUE7O0FBRUEsTUFBQSxNQUFBLEVBQUE7O0FBRUEsTUFBQSxpQkFBQSxHQUFBLFVBQUEsU0FBQSxFQUFBO0FBQ0EsV0FBQSxNQUFBLEdBQUEsQ0FBQSwyQkFBQSxTQUFBLEVBQUEsSUFBQSxDQUFBLFVBQUEsR0FBQSxFQUFBO0FBQ0EsYUFBQSxJQUFBLElBQUE7QUFDQSxLQUZBLENBQUE7QUFHQSxHQUpBOztBQU1BLFNBQUEsR0FBQTtBQUVBLENBWkEiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcblxud2luZG93LmFwcCA9IGFuZ3VsYXIubW9kdWxlKCdNeUFwcCcsIFsndWkucm91dGVyJywgJ3VpLmJvb3RzdHJhcCcsICduZ0FuaW1hdGUnLCAnbmdLb29raWVzJ10pO1xuXG5hcHAuY29uZmlnKGZ1bmN0aW9uICgkdXJsUm91dGVyUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyLCAka29va2llc1Byb3ZpZGVyKSB7XG4gICAgLy8gVGhpcyB0dXJucyBvZmYgaGFzaGJhbmcgdXJscyAoLyNhYm91dCkgYW5kIGNoYW5nZXMgaXQgdG8gc29tZXRoaW5nIG5vcm1hbCAoL2Fib3V0KVxuICAgICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTtcbiAgICAvLyBJZiB3ZSBnbyB0byBhIFVSTCB0aGF0IHVpLXJvdXRlciBkb2Vzbid0IGhhdmUgcmVnaXN0ZXJlZCwgZ28gdG8gdGhlIFwiL1wiIHVybC5cbiAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvJyk7XG4gICAgLy8gVHJpZ2dlciBwYWdlIHJlZnJlc2ggd2hlbiBhY2Nlc3NpbmcgYW4gT0F1dGggcm91dGVcbiAgICAkdXJsUm91dGVyUHJvdmlkZXIud2hlbignL2F1dGgvOnByb3ZpZGVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgfSk7XG5cbiAgICAka29va2llc1Byb3ZpZGVyLmNvbmZpZy5qc29uID0gdHJ1ZTtcblxufSk7IiwiYXBwLmRpcmVjdGl2ZSgncG9sbCcsICgkc3RhdGUsIFBvbGxGYWN0b3J5KSA9PiB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICBzY29wZToge1xuXG4gICAgfSxcbiAgICB0ZW1wbGF0ZVVybDogJ2pzL2NvbW1vbi9wb2xsL3BvbGwuaHRtbCcsXG4gICAgbGluazogKHNjb3BlKSA9PiB7XG4gICAgICBQb2xsRmFjdG9yeS5nZXRBbGxCeUxlY3R1cmVJZCgxKVxuICAgICAgLnRoZW4oKHBvbGxzKSA9PiB7XG4gICAgICAgIHNjb3BlLnBvbGxzID0gcG9sbHNcbiAgICAgIH0pXG4gICAgfVxuICB9XG59KVxuIiwiYXBwLmZhY3RvcnkoJ1BvbGxGYWN0b3J5JywgKCRodHRwKSA9PiB7XG4gIGZ1bmN0aW9uIGRvdERhdGEoZG90KSB7XG4gICAgcmV0dXJuIGRvdC5kYXRhXG4gIH1cbiAgcmV0dXJuIHtcbiAgICBkb3REYXRhOiAoZG90KSA9PiB7XG4gICAgICByZXR1cm4gZG90LmRhdGFcbiAgICB9LFxuICAgIGdldEFsbEJ5TGVjdHVyZUlkOiAoaWQpID0+IHtcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9sbC9sZWN0dXJlLycraWQpXG4gICAgICAudGhlbihkb3REYXRhKVxuICAgIH0sXG4gICAgZ2V0T25lQnlQb2xsSWQ6IChpZCkgPT4ge1xuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9wb2xsLycraWQpXG4gICAgICAudGhlbihkb3REYXRhKVxuICAgIH0sXG4gICAgY3JlYXRlUG9sbDogKHBvbGxPYmopID0+IHtcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3BvbGwvJywgcG9sbE9iailcbiAgICAgIC50aGVuKGRvdERhdGEpXG4gICAgfSxcbiAgICB1cGRhdGVQb2xsOiAocG9sbE9iaiwgaWQpID0+IHtcbiAgICAgIHJldHVybiAkaHR0cC5wdXQoJy9hcGkvcG9sbC8nK2lkLCBwb2xsT2JqKVxuICAgICAgLnRoZW4oZG90RGF0YSlcbiAgICB9LFxuICAgIGRlbGV0ZVBvbGw6IChpZCkgPT4ge1xuICAgICAgcmV0dXJuICRodHRwLmRlbGV0ZSgnL2FwaS9wb2xsLycraWQpXG4gICAgICAudGhlbihkb3REYXRhKVxuICAgIH1cbiAgfVxufSlcbiIsImFwcC5kaXJlY3RpdmUoJ3F1ZXN0aW9uJywgZnVuY3Rpb24oJHN0YXRlLCBRdWVzdGlvbkZhY3RvcnkpIHtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICBcbiAgICAgICAgfSxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdqcy9jb21tb24vcXVlc3Rpb24vcXVlc3Rpb24uaHRtbCcsXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlKSB7XG4gICAgICAgICAgICBzY29wZS5xdWVzdGlvbnMgPSBbXG4gICAgICAgICAgICAgICAgeyB0ZXh0OiBcIldoYXQgaXMgbGlmZT9cIn0sXG4gICAgICAgICAgICAgICAgeyB0ZXh0OiBcIldoYXQgaXMgZGVhdGg/XCJ9LFxuICAgICAgICAgICAgICAgIHsgdGV4dDogXCJXaGF0IGlzIGNvZGU/XCJ9LFxuICAgICAgICAgICAgXVxuXG4gICAgICAgICAgICBzY29wZS5zdWJtaXRRdWVzdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmIChzY29wZS5uZXdRdWVzdGlvbikgc2NvcGUucXVlc3Rpb25zLnVuc2hpZnQoe3RleHQ6IHNjb3BlLm5ld1F1ZXN0aW9ufSlcbiAgICAgICAgICAgICAgICBzY29wZS5uZXdRdWVzdGlvbiA9IG51bGxcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2NvcGUuZGVsZXRlUXVlc3Rpb24gPSBmdW5jdGlvbihxdWVzdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHNjb3BlLnF1ZXN0aW9ucy5pbmRleE9mKHF1ZXN0aW9uKVxuICAgICAgICAgICAgICAgIHNjb3BlLnF1ZXN0aW9ucy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59KTtcbiIsImFwcC5mYWN0b3J5KCdRdWVzdGlvbkZhY3RvcnknLCBmdW5jdGlvbiAoJGh0dHApIHtcblxuXHR2YXIgb2JqID0ge307XG5cblx0b2JqLmdldEFsbEJ5TGVjdHVyZUlkID0gZnVuY3Rpb24obGVjdHVyZUlkKSB7XG5cdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9xdWVzdGlvbi9sZWN0dXJlLycgKyBsZWN0dXJlSWQpLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG5cdFx0XHRyZXR1cm4gcmVzLmRhdGE7XG5cdFx0fSlcblx0fVxuXG5cdHJldHVybiBvYmo7XG5cbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
