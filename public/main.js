'use strict';

window.app = angular.module('MyApp', ['ui.router', 'ui.bootstrap', 'ngAnimate', 'ngKookies']);

app.config(function ($urlRouterProvider, $locationProvider, $kookiesProvider) {
  // This turns off hashbang urls (/#about) and changes it to something normal (/about)
  $locationProvider.html5Mode(true);
  // If we go to a URL that ui-router doesn't have registered, go to the "/" url.
  $urlRouterProvider.otherwise('/');
  // Trigger page refresh when accessing an OAuth route
  $urlRouterProvider.when('/auth/:provider', function () {
    window.location.reload();
  });

  $kookiesProvider.config.json = true;
});
app.controller('CreatePoll', function ($scope, $uibModal) {

  $scope.showModal = function () {

    $scope.opts = {
      backdrop: true,
      backdropClick: true,
      transclude: true,
      dialogFade: false,
      keyboard: true,
      templateUrl: 'js/common/createPollModal/createPollModal.html',
      controller: ModalInstanceCtrl,
      resolve: {} // empty storage
    };

    $scope.opts.resolve.item = function () {
      return angular.copy({ polls: $scope.polls }); // pass name to Dialog
    };

    var modalInstance = $uibModal.open($scope.opts);

    modalInstance.result.then(function () {
      //on ok button press
    }, function () {
      //on cancel button press
      console.log("Modal Closed");
    });
  };
});

var ModalInstanceCtrl = function ModalInstanceCtrl($scope, $uibModalInstance, $uibModal, item, PollFactory) {

  $scope.item = item;

  $scope.customOptions = function (option) {
    $scope.customShow = option === 'custom';
  };

  $scope.submitPoll = function () {
    var poll = {};
    poll.question = $scope.newPoll;
    poll.lectureId = 1;
    if ($scope.option == 'custom') poll.options = [$scope.a, $scope.b, $scope.c, $scope.d];
    PollFactory.createPoll(poll).then(function () {
      return PollFactory.getAllByLectureId(1);
    }).then(function (polls) {
      $scope.polls = polls;
    }).then(function () {
      $uibModalInstance.close();
    });
  };

  $scope.cancel = function () {
    $uibModalInstance.dismiss('cancel');
  };
};

app.directive('question', function ($state, QuestionFactory) {

  return {
    restrict: 'E',
    scope: {},
    templateUrl: 'js/common/question/question.html',
    link: function link(scope) {
      scope.questions = [{ text: "What is life?" }, { text: "What is death?" }, { text: "What is code?" }];

      scope.submitQuestion = function () {
        if (scope.newQuestion) scope.questions.unshift({ text: scope.newQuestion });
        scope.newQuestion = null;
      };

      scope.deleteQuestion = function (question) {
        var index = scope.questions.indexOf(question);
        scope.questions.splice(index, 1);
      };
    }
  };
});

app.factory('QuestionFactory', function ($http) {

  var obj = {};

  obj.getAllByLectureId = function (lectureId) {
    return $http.get('/api/question/lecture/' + lectureId).then(function (res) {
      return res.data;
    });
  };

  return obj;
});

app.directive('poll', function ($state, PollFactory) {
  return {
    restrict: 'E',
    scope: {
      useCtrl: "@"
    },
    templateUrl: 'js/common/poll/poll.html',
    link: function link(scope) {

      scope.delete = PollFactory.deletePoll;

      PollFactory.getAllByLectureId(1).then(function (currentPolls) {
        scope.polls = currentPolls;
      });
    }
  };
});

app.factory('PollFactory', function ($http) {
  function dotData(dot) {
    return dot.data;
  }
  var cachedPolls = [];
  return {
    getAllByLectureId: function getAllByLectureId(id) {
      return $http.get('/api/poll/lecture/' + id).then(dotData).then(function (polls) {
        angular.copy(polls, cachedPolls);
        return cachedPolls;
      });
    },
    getOneByPollId: function getOneByPollId(id) {
      return $http.get('/api/poll/' + id).then(dotData);
    },
    createPoll: function createPoll(pollObj) {
      return $http.post('/api/poll/', pollObj).then(dotData);
    },
    updatePoll: function updatePoll(pollObj, id) {
      return $http.put('/api/poll/' + id, pollObj).then(dotData);
    },
    deletePoll: function deletePoll(id) {
      return $http.delete('/api/poll/' + id).then(dotData).then(function (removedPoll) {
        cachedPolls.splice(cachedPolls.map(function (item) {
          return item.id;
        }).indexOf(id), 1);
        return cachedPolls;
      });
    }
  };
});
//# sourceMappingURL=data:application/json;base64,
