'use strict';

window.app = angular.module('MyApp', ['ui.router', 'ui.bootstrap', 'ngAnimate', 'ngKookies']);

app.config(function ($urlRouterProvider, $locationProvider, $kookiesProvider) {
  // This turns off hashbang urls (/#about) and changes it to something normal (/about)
  $locationProvider.html5Mode(true);
  // If we go to a URL that ui-router doesn't have registered, go to the "/" url.
  $urlRouterProvider.otherwise('/');
  // Trigger page refresh when accessing an OAuth route
  $urlRouterProvider.when('/auth/:provider', function () {
    window.location.reload();
  });

  $kookiesProvider.config.json = true;
});

app.config(function ($stateProvider) {
  $stateProvider.state('student', {
    url: '/student',
    templateUrl: 'js/views/student/student.html'
  });
});

app.config(function ($stateProvider) {
  $stateProvider.state('admin', {
    url: '/admin',
    templateUrl: 'js/views/instructor/instructor.html'
  });
});

app.config(function ($stateProvider) {
  $stateProvider.state('summary', {
    url: '/summary',
    templateUrl: 'js/views/summary/summary.html'
  });
});

app.controller('LoginCtrl', function ($scope, $state) {

  console.log("reached login ctrl");
  $scope.loginStatus = function () {
    console.log("reached login status");
    var temp = $scope.login;
    console.log("temp: ", temp);

    if (temp === 'admin') {
      $state.go('admin');
    } else if (temp === 'student') {
      $state.go('student');
    } else if (temp === 'summary') {
      $state.go('summary');
    }
  };
});

var socket = io(window.location.origin);
app.controller('CreatePoll', function ($scope, $uibModal) {

  $scope.showModal = function () {

    $scope.opts = {
      backdrop: true,
      backdropClick: true,
      transclude: true,
      dialogFade: false,
      keyboard: true,
      templateUrl: 'js/common/createPollModal/createPollModal.html',
      controller: ModalInstanceCtrl,
      resolve: {} // empty storage
    };

    $scope.opts.resolve.item = function () {
      return angular.copy({ polls: $scope.polls }); // pass name to Dialog
    };

    var modalInstance = $uibModal.open($scope.opts);

    modalInstance.result.then(function () {
      //on ok button press
    }, function () {
      //on cancel button press
    });
  };
});

var ModalInstanceCtrl = function ModalInstanceCtrl($scope, $uibModalInstance, $uibModal, item, PollFactory) {

  $scope.item = item;

  $scope.customOptions = function (option) {
    $scope.customShow = option === 'custom';
  };

  $scope.submitPoll = function () {
    var poll = {};
    poll.question = $scope.newPoll;
    poll.lectureId = 1;
    if ($scope.option == 'custom') poll.options = [$scope.a, $scope.b, $scope.c, $scope.d];

    PollFactory.createPoll(poll).then(function () {
      return PollFactory.getAllByLectureId(1);
    }).then(function (polls) {
      $scope.polls = polls;
    }).then(function () {
      $uibModalInstance.close();
    });
  };

  $scope.cancel = function () {
    $uibModalInstance.dismiss('cancel');
  };
};

app.directive('feedback', function ($state, FeedbackFactory) {
  return {
    restrict: 'E',
    scope: {},
    templateUrl: 'js/common/feedback/feedback.html',
    link: function link(scope) {
      scope.addMessage = false;
      scope.rejectMessage = false;

      scope.countFeedback = function (category) {
        if (category === 'Great' && !scope.greatCount || category === 'Confused' && !scope.confusedCount || category === 'Example' && !scope.exampleCount || category === 'Cannot See' && !scope.seeCount || category === 'Cannot Hear' && !scope.hearCount || category === 'Request Break' && !scope.breakCount) {
          return FeedbackFactory.addFeedback(category).then(function () {
            return FeedbackFactory.countFeedback(category);
          }).then(function (result) {
            socket.emit('submittedFeedback', category);

            console.log('IT IS HERE', result);
            if (category === 'Great') {
              scope.greatCount = result;
            }
            if (category === 'Confused') {
              scope.confusedCount = result;
            }
            if (category === 'Example') {
              scope.exampleCount = result;
            }
            if (category === 'Cannot See') {
              scope.seeCount = result;
            }
            if (category === 'Cannot Hear') {
              scope.hearCount = result;
            }
            if (category === 'Request Break') {
              scope.breakCount = result;
            }
          }).then(function () {
            scope.addMessage = true;
            setTimeout(function () {
              scope.addMessage = false;
              scope.$digest();
            }, 1500);
          }).then(function () {
            setTimeout(function () {
              scope.greatCount = null;
              scope.confusedCount = null;
              scope.exampleCount = null;
              scope.seeCount = null;
              scope.hearCount = null;
              scope.breakCount = null;
              scope.$digest();
            }, 30 * 1000);
          });
        } else {
          scope.rejectMessage = true;
          setTimeout(function () {
            scope.rejectMessage = false;
            scope.$digest();
          }, 1500);
        }
      };

      socket.on('updateFeedback', function (category) {
        console.log('received -->', category);

        return FeedbackFactory.countFeedback(category).then(function (result) {
          if (category === 'Great') {
            scope.greatCount = result;
          }
          if (category === 'Confused') {
            scope.confusedCount = result;
          }
          if (category === 'Example') {
            scope.exampleCount = result;
          }
          if (category === 'Cannot See') {
            scope.seeCount = result;
          }
          if (category === 'Cannot Hear') {
            scope.hearCount = result;
          }
          if (category === 'Request Break') {
            scope.breakCount = result;
          }
        }).then(function () {
          setTimeout(function () {
            scope.greatCount = null;
            scope.confusedCount = null;
            scope.exampleCount = null;
            scope.seeCount = null;
            scope.hearCount = null;
            scope.breakCount = null;
            scope.$digest();
          }, 30 * 1000);
        });
        // scope.$digest()
      });
    }
  };
});

app.factory('FeedbackFactory', function ($http) {
  var FeedbackFactory = {};

  FeedbackFactory.addFeedback = function (category) {
    return $http.post('/api/feedback/', { category: category }).then(function (result) {
      console.log('gotHERE', result);
    });
  };

  FeedbackFactory.countFeedback = function (category) {
    return $http.get('/api/feedback/count/' + category).then(function (result) {
      return result.data;
    });
  };

  return FeedbackFactory;
});
app.directive('poll', function ($state, PollFactory) {
  return {
    restrict: 'E',
    scope: {
      useCtrl: "@"
    },
    templateUrl: 'js/common/poll/poll.html',
    link: function link(scope) {

      scope.delete = PollFactory.deletePoll;

      PollFactory.getAllByLectureId(1).then(function (currentPolls) {
        scope.polls = currentPolls;
      });

      scope.sendPoll = function (poll) {
        socket.emit('pollOut', poll);
      };
    }
  };
});

app.factory('PollFactory', function ($http) {
  function dotData(dot) {
    return dot.data;
  }
  var cachedPolls = [];
  return {
    getAllByLectureId: function getAllByLectureId(id) {
      return $http.get('/api/poll/lecture/' + id).then(dotData).then(function (polls) {
        angular.copy(polls, cachedPolls);
        return cachedPolls;
      });
    },
    getOneByPollId: function getOneByPollId(id) {
      return $http.get('/api/poll/' + id).then(dotData);
    },
    createPoll: function createPoll(pollObj) {
      return $http.post('/api/poll/', pollObj).then(dotData);
    },
    updatePoll: function updatePoll(pollObj, id) {
      return $http.put('/api/poll/' + id, pollObj).then(dotData);
    },
    deletePoll: function deletePoll(id) {
      return $http.delete('/api/poll/' + id).then(dotData).then(function (removedPoll) {
        cachedPolls.splice(cachedPolls.map(function (item) {
          return item.id;
        }).indexOf(id), 1);
        return cachedPolls;
      });
    }
  };
});

app.controller('StudentPoll', function ($scope, $uibModal) {
  $scope.showModal = function () {

    $scope.opts = {
      backdrop: true,
      backdropClick: true,
      transclude: true,
      dialogFade: false,
      keyboard: true,
      templateUrl: 'js/common/studentModal/studentPoll.html',
      controller: StudentModalInstance,
      resolve: {} // empty storage
    };

    $scope.opts.resolve.item = function () {
      return angular.copy({ poll: $scope.poll }); // pass name to Dialog
    };

    var modalInstance = $uibModal.open($scope.opts);

    modalInstance.result.then(function () {
      //on ok button press
    }, function () {
      //on cancel button press
    });
  };

  socket.on('toStudent', function (pollQuestion) {
    $scope.poll = pollQuestion;
    $scope.showModal();
  });
});

function StudentModalInstance($scope, $uibModalInstance, $uibModal, item, PollFactory) {

  $scope.item = item;

  socket.on('toStudent', function (pollQuestion) {
    $scope.poll = pollQuestion;
  });

  $scope.submitAnswer = function () {
    $uibModalInstance.close();
  };
}

app.directive('question', function ($state, QuestionFactory) {

  return {
    restrict: 'E',
    scope: {},
    templateUrl: 'js/common/question/question.html',
    link: function link(scope) {

      QuestionFactory.getAllByLectureId(1).then(function (questions) {
        scope.questions = questions.filter(function (q) {
          return q.status === 'open';
        });
      });

      function findIndex(question) {
        for (var i = 0; i < scope.questions.length; i++) {
          if (scope.questions[i].text === question.text) {
            return i;
          }
        }
        return -1;
      }

      function move(question, n) {
        var index = findIndex(question);
        if (index + n > -1 && index + n < scope.questions.length) {
          scope.questions.splice(index, 1);
          scope.questions.splice(index + n, 0, question);
        }
      }

      scope.submit = function () {
        if (scope.newQuestion) {
          var question = { text: scope.newQuestion, submitTime: Date.now(), upvotes: 0 };
          return QuestionFactory.store(question).then(function (q) {
            socket.emit('addingQuestion', q);
            scope.newQuestion = null;
          });
        }
      };

      scope.delete = function (question) {
        socket.emit('deletingQuestion', question);
        return QuestionFactory.delete(question);
      };

      scope.close = function (question) {
        question.status = 'closed';
        return QuestionFactory.update(question).then(function () {
          socket.emit('deletingQuestion', question);
        });
      };

      scope.move = function (question, n) {
        socket.emit('move', question, n);
      };

      scope.upvote = function (question) {
        question.hasUpvoted = !question.hasUpvoted;
        question.upvotes++;
        socket.emit('upvoting', question);
        return QuestionFactory.update(question);
      };

      scope.downvote = function (question) {
        question.hasUpvoted = !question.hasUpvoted;
        question.upvotes--;
        socket.emit('downvoting', question);
        return QuestionFactory.update(question);
      };

      socket.on('addQuestion', function (question) {
        scope.questions.unshift(question);
        scope.$evalAsync();
      });

      socket.on('deleteQuestion', function (question) {
        var index = findIndex(question);
        scope.questions.splice(index, 1);
        scope.$evalAsync();
      });

      socket.on('receivedUpvote', function (question) {
        var index = findIndex(question);
        var question = scope.questions[index];
        question.upvotes++;
        scope.$evalAsync();
      });

      socket.on('receivedDownvote', function (question) {
        var index = findIndex(question);
        var question = scope.questions[index];
        question.upvotes--;
        scope.$evalAsync();
      });

      socket.on('moving', function (question, n) {
        move(question, n);
        scope.$evalAsync();
      });
    }
  };
});

app.factory('QuestionFactory', function ($http) {

  var obj = {};

  obj.getAllByLectureId = function (lectureId) {
    return $http.get('/api/question/lecture/' + lectureId).then(function (res) {
      return res.data;
    });
  };

  obj.store = function (question) {
    return $http.post('/api/question', question).then(function (res) {
      return res.data;
    });
  };

  obj.update = function (question) {
    return $http.put('/api/question/' + question.id, question).then(function (res) {
      return res.data;
    });
  };

  obj.delete = function (question) {
    return $http.delete('/api/question/' + question.id).then(function (res) {
      return res.data;
    });
  };

  return obj;
});
//# sourceMappingURL=data:application/json;base64,
