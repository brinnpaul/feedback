'use strict';

window.app = angular.module('MyApp', ['ui.router', 'ui.bootstrap', 'ngAnimate', 'ngKookies']);

app.config(function ($urlRouterProvider, $locationProvider, $kookiesProvider) {
  // This turns off hashbang urls (/#about) and changes it to something normal (/about)
  $locationProvider.html5Mode(true);
  // If we go to a URL that ui-router doesn't have registered, go to the "/" url.
  $urlRouterProvider.otherwise('/');
  // Trigger page refresh when accessing an OAuth route
  $urlRouterProvider.when('/auth/:provider', function () {
    window.location.reload();
  });

  $kookiesProvider.config.json = true;
});
app.directive('feedback', function ($state, FeedbackFactory) {
  return {
    restrict: 'E',
    scope: {},
    templateUrl: 'js/common/feedback/feedback.html',
    link: function link(scope) {
      scope.addMessage = false;

      scope.countFeedback = function (category) {
        return FeedbackFactory.addFeedback(category).then(function () {
          return FeedbackFactory.countFeedback(category);
        }).then(function (result) {
          console.log('IT IS HERE', result);
          if (category === 'Great') {
            scope.greatCount = result;
          }
          if (category === 'Confused') {
            scope.confusedCount = result;
          }
          if (category === 'Example') {
            scope.exampleCount = result;
          }
        }).then(function () {
          scope.addMessage = true;
          setTimeout(function () {
            scope.addMessage = false;
            scope.$digest();
          }, 1000);
        }).then(function () {
          setTimeout(function () {
            scope.greatCount = null;
            scope.confusedCount = null;
            scope.exampleCount = null;
            scope.$digest();
          }, 30 * 1000);
        });
      };

      // scope.countConfusedFeedback = function () {
      //   return FeedbackFactory.countFeedback('Confused')
      //   .then(function (result) {
      //     scope.confusedCount = result
      //   })
      //   .then(function () {
      //     setTimeout(function() {
      //       scope.greatCount = null
      //       scope.$digest();
      //     }, 30*1000)
      //   })
      // }

      // scope.countExampleFeedback = function () {
      //   return FeedbackFactory.countFeedback('Example')
      //   .then(function (result) {
      //     scope.exampleCount = result
      //   })
      //   .then(function () {
      //     setTimeout(function() {
      //       scope.greatCount = null
      //       scope.$digest();
      //     }, 30*1000)
      //   })
      // }
    }
  };
});

app.factory('FeedbackFactory', function ($http) {
  var FeedbackFactory = {};

  FeedbackFactory.addFeedback = function (category) {
    return $http.post('/api/feedback/', { category: category }).then(function (result) {
      console.log('gotHERE', result);
    });
  };

  FeedbackFactory.countFeedback = function (category) {
    return $http.get('/api/feedback/count/' + category).then(function (result) {
      return result.data;
    });
  };

  return FeedbackFactory;
});
app.directive('poll', function ($state, PollFactory) {
  return {
    restrict: 'E',
    scope: {},
    templateUrl: 'js/common/poll/poll.html',
    link: function link(scope) {
      PollFactory.getAllByLectureId(1).then(function (polls) {
        scope.polls = polls;
      });
    }
  };
});

app.factory('PollFactory', function ($http) {
  function dotData(dot) {
    return dot.data;
  }
  return {
    dotData: function dotData(dot) {
      return dot.data;
    },
    getAllByLectureId: function getAllByLectureId(id) {
      return $http.get('/api/poll/lecture/' + id).then(dotData);
    },
    getOneByPollId: function getOneByPollId(id) {
      return $http.get('/api/poll/' + id).then(dotData);
    },
    createPoll: function createPoll(pollObj) {
      return $http.post('/api/poll/', pollObj).then(dotData);
    },
    updatePoll: function updatePoll(pollObj, id) {
      return $http.put('/api/poll/' + id, pollObj).then(dotData);
    },
    deletePoll: function deletePoll(id) {
      return $http.delete('/api/poll/' + id).then(dotData);
    }
  };
});

app.directive('question', function ($state, QuestionFactory) {

  return {
    restrict: 'E',
    scope: {},
    templateUrl: 'js/common/question/question.html',
    link: function link(scope) {
      scope.questions = [{ text: "What is life?" }, { text: "What is death?" }, { text: "What is code?" }];

      scope.submitQuestion = function () {
        if (scope.newQuestion) scope.questions.unshift({ text: scope.newQuestion });
        scope.newQuestion = null;
      };

      scope.deleteQuestion = function (question) {
        var index = scope.questions.indexOf(question);
        scope.questions.splice(index, 1);
      };
    }
  };
});

app.factory('QuestionFactory', function ($http) {

  var obj = {};

  obj.getAllByLectureId = function (lectureId) {
    return $http.get('/api/question/lecture/' + lectureId).then(function (res) {
      return res.data;
    });
  };

  return obj;
});
//# sourceMappingURL=data:application/json;base64,
